
Attiny_IR_RGBW_Spectrum.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000033c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  0000033c  000003d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800080  00800080  000003f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000420  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000091c  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004ef  00000000  00000000  00000db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000466  00000000  00000000  000012a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  00001710  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a1  00000000  00000000  00001790  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000330  00000000  00000000  00001c31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00001f61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	21 c0       	rjmp	.+66     	; 0x48 <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	ec e3       	ldi	r30, 0x3C	; 60
  24:	f3 e0       	ldi	r31, 0x03	; 3
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a0 38       	cpi	r26, 0x80	; 128
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e8       	ldi	r26, 0x80	; 128
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	ab 38       	cpi	r26, 0x8B	; 139
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	aa d0       	rcall	.+340    	; 0x198 <main>
  44:	79 c1       	rjmp	.+754    	; 0x338 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_2>:
}

/**
 * PCINT0 interrupt from IR_SENSOR_PIN - decode data
 */
ISR (PCINT0_vect) {
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
  52:	2f 93       	push	r18
  54:	8f 93       	push	r24
  56:	9f 93       	push	r25
	static byte bit_counter;
	static word data_buffer;
	
	// Consider only falling edge
	if (PINB & (1 << IR_SENSOR_PIN)) return;
  58:	b4 99       	sbic	0x16, 4	; 22
  5a:	36 c0       	rjmp	.+108    	; 0xc8 <__stack+0x29>
	
	// Buffer current timer counter value and reset it
	byte timer_counter = ir_timer_counter;
  5c:	22 b7       	in	r18, 0x32	; 50
	ir_reset_timer_counter();
  5e:	81 e0       	ldi	r24, 0x01	; 1
  60:	82 bf       	out	0x32, r24	; 50
	
	// Start of new data
	if (ir_timer_has_overflow()) {
  62:	08 b6       	in	r0, 0x38	; 56
  64:	01 fe       	sbrs	r0, 1
  66:	05 c0       	rjmp	.+10     	; 0x72 <__vector_2+0x2a>
		bit_counter = 0;
  68:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <bit_counter.1616>
		timer_counter = 0;
		ir_reset_timer_overflow();
  6c:	82 e0       	ldi	r24, 0x02	; 2
  6e:	88 bf       	out	0x38, r24	; 56
		return;
  70:	2b c0       	rjmp	.+86     	; 0xc8 <__stack+0x29>
	}
	
	// Ignore start sequence
	if (timer_counter >= IR_START_SEQ_TICKS) return;
  72:	20 34       	cpi	r18, 0x40	; 64
  74:	48 f5       	brcc	.+82     	; 0xc8 <__stack+0x29>

	// Set next bit to high or low
	data_buffer <<= 1;
  76:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
  7a:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__data_end+0x1>
  7e:	88 0f       	add	r24, r24
  80:	99 1f       	adc	r25, r25
	if (timer_counter >= IR_HIGH_BIT_TICKS) data_buffer |= 1;
  82:	20 32       	cpi	r18, 0x20	; 32
  84:	08 f0       	brcs	.+2      	; 0x88 <__vector_2+0x40>
  86:	81 60       	ori	r24, 0x01	; 1
  88:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__data_end+0x1>
  8c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__data_end>
	bit_counter++;
  90:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <bit_counter.1616>
  94:	9f 5f       	subi	r25, 0xFF	; 255
  96:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <bit_counter.1616>
	
	// Current high and low byte values of data
	byte data_high_byte = data_buffer >> 8;
  9a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
  9e:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <__data_end+0x1>
	byte data_low_byte = ~data_buffer;
  a2:	80 95       	com	r24
	
	// End of address
	#ifdef IR_VALIDATE_ADDRESS
		// Cancel reception if address isn't correct
		if (bit_counter == 16) {
  a4:	90 31       	cpi	r25, 0x10	; 16
  a6:	19 f4       	brne	.+6      	; 0xae <__stack+0xf>
			if (data_high_byte != data_low_byte) {
  a8:	28 13       	cpse	r18, r24
				bit_counter = 0;
  aa:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <bit_counter.1616>
			}
	}
	#endif
	
	// End of data
	if (bit_counter == 32) {
  ae:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <bit_counter.1616>
  b2:	90 32       	cpi	r25, 0x20	; 32
  b4:	49 f4       	brne	.+18     	; 0xc8 <__stack+0x29>
		// Validate and save received command
		if (data_high_byte == data_low_byte) {
  b6:	28 13       	cpse	r18, r24
  b8:	05 c0       	rjmp	.+10     	; 0xc4 <__stack+0x25>
			ir_received_command = data_high_byte;
  ba:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <ir_received_command>
			has_new_command = 1;
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <has_new_command>
		}
		ir_overflow_timer();
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	82 bf       	out	0x32, r24	; 50
	}
	
	
}
  c8:	9f 91       	pop	r25
  ca:	8f 91       	pop	r24
  cc:	2f 91       	pop	r18
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <anim_set_brightness>:

/**
 * Apply current brightness value
 */
extern void anim_set_brightness(byte val) {
	r_current_value = (r_value * val) >> BRIGHTNESS_DIVIDER;
  d8:	28 2f       	mov	r18, r24
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <r_value>
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	b9 01       	movw	r22, r18
  e4:	18 d1       	rcall	.+560    	; 0x316 <__mulhi3>
  e6:	88 0f       	add	r24, r24
  e8:	89 2f       	mov	r24, r25
  ea:	88 1f       	adc	r24, r24
  ec:	99 0b       	sbc	r25, r25
  ee:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <r_current_value>
	g_current_value = (g_value * val) >> BRIGHTNESS_DIVIDER;
  f2:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <g_value>
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	b9 01       	movw	r22, r18
  fa:	0d d1       	rcall	.+538    	; 0x316 <__mulhi3>
  fc:	88 0f       	add	r24, r24
  fe:	89 2f       	mov	r24, r25
 100:	88 1f       	adc	r24, r24
 102:	99 0b       	sbc	r25, r25
 104:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <g_current_value>
	b_current_value = (b_value * val) >> BRIGHTNESS_DIVIDER;
 108:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <b_value>
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	b9 01       	movw	r22, r18
 110:	02 d1       	rcall	.+516    	; 0x316 <__mulhi3>
 112:	88 0f       	add	r24, r24
 114:	89 2f       	mov	r24, r25
 116:	88 1f       	adc	r24, r24
 118:	99 0b       	sbc	r25, r25
 11a:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <b_current_value>
	w_current_value = (w_value * val) >> BRIGHTNESS_DIVIDER;
 11e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <w_value>
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	b9 01       	movw	r22, r18
 126:	f7 d0       	rcall	.+494    	; 0x316 <__mulhi3>
 128:	88 0f       	add	r24, r24
 12a:	89 2f       	mov	r24, r25
 12c:	88 1f       	adc	r24, r24
 12e:	99 0b       	sbc	r25, r25
 130:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 134:	08 95       	ret

00000136 <anim_interpolate_triangular>:

/**
 * Interpolation between two values to create RGB spectrum
 */
extern void anim_interpolate_triangular(byte val, byte *c1, byte *c2) {
	if (val < 43) {
 136:	8b 32       	cpi	r24, 0x2B	; 43
 138:	28 f4       	brcc	.+10     	; 0x144 <anim_interpolate_triangular+0xe>
		*c1 = PWM_MAX_VALUE;
 13a:	96 e5       	ldi	r25, 0x56	; 86
 13c:	fb 01       	movw	r30, r22
 13e:	90 83       	st	Z, r25
		*c2 = (PWM_MAX_VALUE / 43) * val;
 140:	88 0f       	add	r24, r24
 142:	0a c0       	rjmp	.+20     	; 0x158 <anim_interpolate_triangular+0x22>
	} else {
		*c1 = (PWM_MAX_VALUE / 43) * (85 - val);
 144:	25 e5       	ldi	r18, 0x55	; 85
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	f9 01       	movw	r30, r18
 14a:	e8 1b       	sub	r30, r24
 14c:	f1 09       	sbc	r31, r1
 14e:	cf 01       	movw	r24, r30
 150:	88 0f       	add	r24, r24
 152:	fb 01       	movw	r30, r22
 154:	80 83       	st	Z, r24
		*c2 = PWM_MAX_VALUE;
 156:	86 e5       	ldi	r24, 0x56	; 86
 158:	fa 01       	movw	r30, r20
 15a:	80 83       	st	Z, r24
 15c:	08 95       	ret

0000015e <anim_set_color_from_spectrum>:

/**
 * Set color from spectrum by given coords
 */
extern void anim_set_color_from_spectrum(byte coords) {
	r_value = 0;
 15e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <r_value>
	g_value = 0;
 162:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <g_value>
	b_value = 0;
 166:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <b_value>
	w_value = 0;
 16a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <w_value>
	
	if (coords <= 85)
 16e:	86 35       	cpi	r24, 0x56	; 86
 170:	28 f4       	brcc	.+10     	; 0x17c <anim_set_color_from_spectrum+0x1e>
		anim_interpolate_triangular(coords, &r_value, &g_value);
 172:	47 e8       	ldi	r20, 0x87	; 135
 174:	50 e0       	ldi	r21, 0x00	; 0
 176:	68 e8       	ldi	r22, 0x88	; 136
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	0d c0       	rjmp	.+26     	; 0x196 <anim_set_color_from_spectrum+0x38>
	else
		if (coords <= 170)
 17c:	8b 3a       	cpi	r24, 0xAB	; 171
 17e:	30 f4       	brcc	.+12     	; 0x18c <anim_set_color_from_spectrum+0x2e>
			anim_interpolate_triangular(coords - 85, &g_value, &b_value);
 180:	46 e8       	ldi	r20, 0x86	; 134
 182:	50 e0       	ldi	r21, 0x00	; 0
 184:	67 e8       	ldi	r22, 0x87	; 135
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	85 55       	subi	r24, 0x55	; 85
 18a:	05 c0       	rjmp	.+10     	; 0x196 <anim_set_color_from_spectrum+0x38>
		else
			anim_interpolate_triangular(coords - 170, &b_value, &r_value);
 18c:	48 e8       	ldi	r20, 0x88	; 136
 18e:	50 e0       	ldi	r21, 0x00	; 0
 190:	66 e8       	ldi	r22, 0x86	; 134
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	8a 5a       	subi	r24, 0xAA	; 170
 196:	cf cf       	rjmp	.-98     	; 0x136 <anim_interpolate_triangular>

00000198 <main>:
#include "lib/animation.h"

// Entry point
int main(void) {
	// Set up
	power_off_init();
 198:	85 b7       	in	r24, 0x35	; 53
 19a:	87 7e       	andi	r24, 0xE7	; 231
 19c:	80 61       	ori	r24, 0x10	; 16
 19e:	85 bf       	out	0x35, r24	; 53
 1a0:	85 b7       	in	r24, 0x35	; 53
 1a2:	80 62       	ori	r24, 0x20	; 32
 1a4:	85 bf       	out	0x35, r24	; 53
	pwm_init_rgbw();
 1a6:	87 b3       	in	r24, 0x17	; 23
 1a8:	8f 60       	ori	r24, 0x0F	; 15
 1aa:	87 bb       	out	0x17, r24	; 23
/**
 * Set up interrupts for IR receiver
 */
static void ir_init() {
	// Enable timer in normal mode with prescaler 256
	ir_enable_timer();
 1ac:	84 e0       	ldi	r24, 0x04	; 4
 1ae:	83 bf       	out	0x33, r24	; 51
	
	// Enable PCIE interrupt on IR_SENSOR_PIN
	GIMSK |= (1 << PCIE);
 1b0:	8b b7       	in	r24, 0x3b	; 59
 1b2:	80 62       	ori	r24, 0x20	; 32
 1b4:	8b bf       	out	0x3b, r24	; 59
	PCMSK |= (1 << IR_SENSOR_PIN);
 1b6:	ac 9a       	sbi	0x15, 4	; 21
	
	// Enable global interrupts
	sei();
 1b8:	78 94       	sei
	
	// Animation and brightness parameters
	byte anim_rate = ANIM_RATE_INITIAL_VALUE;
	byte anim_counter = 0;
	byte anim_local_counter = 0;
	byte brightness = BRIGHTNESS_INITIAL_VALUE;
 1ba:	d0 e8       	ldi	r29, 0x80	; 128
	byte current_state = INITIAL_STATE;
	
	// Animation and brightness parameters
	byte anim_rate = ANIM_RATE_INITIAL_VALUE;
	byte anim_counter = 0;
	byte anim_local_counter = 0;
 1bc:	00 e0       	ldi	r16, 0x00	; 0
	// Initial state - STATE_COLOR
	byte current_state = INITIAL_STATE;
	
	// Animation and brightness parameters
	byte anim_rate = ANIM_RATE_INITIAL_VALUE;
	byte anim_counter = 0;
 1be:	f1 2c       	mov	r15, r1
	
	// Initial state - STATE_COLOR
	byte current_state = INITIAL_STATE;
	
	// Animation and brightness parameters
	byte anim_rate = ANIM_RATE_INITIAL_VALUE;
 1c0:	10 e2       	ldi	r17, 0x20	; 32
	power_off_init();
	pwm_init_rgbw();
	ir_init();
	
	// Initial state - STATE_COLOR
	byte current_state = INITIAL_STATE;
 1c2:	c0 e0       	ldi	r28, 0x00	; 0
	// Try to set white
	if (key == IR_KEY_COLOR_WHITE) {
		r_value = 0;
		g_value = 0;
		b_value = 0;
		w_value = PWM_MAX_VALUE;
 1c4:	36 e5       	ldi	r19, 0x56	; 86
 1c6:	e3 2e       	mov	r14, r19

/**
 * Check if new data exists
 */
static byte ir_has_new_command() {
	return has_new_command;
 1c8:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <has_new_command>
	byte brightness = BRIGHTNESS_INITIAL_VALUE;
	
	// Main loop
	while(1) {
		// Check if new command was received and change state
		if (ir_has_new_command()) {
 1cc:	88 23       	and	r24, r24
 1ce:	09 f4       	brne	.+2      	; 0x1d2 <main+0x3a>
 1d0:	57 c0       	rjmp	.+174    	; 0x280 <main+0xe8>

/**
 * Return last received data
 */
static byte ir_get_received_command() {
	has_new_command = 0;
 1d2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <has_new_command>
	return ir_received_command;
 1d6:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <ir_received_command>
			byte command = ir_get_received_command();

			// Power on and power off
			if (command == IR_KEY_POWER_ON) {
 1da:	80 3e       	cpi	r24, 0xE0	; 224
 1dc:	11 f4       	brne	.+4      	; 0x1e2 <main+0x4a>
				clear_power_off_bit(current_state);
 1de:	cf 77       	andi	r28, 0x7F	; 127
				continue;
 1e0:	f3 cf       	rjmp	.-26     	; 0x1c8 <main+0x30>
			}
			if (command == IR_KEY_POWER_OFF) {
 1e2:	80 36       	cpi	r24, 0x60	; 96
 1e4:	11 f4       	brne	.+4      	; 0x1ea <main+0x52>
				set_power_off_bit(current_state);
 1e6:	c0 68       	ori	r28, 0x80	; 128
				continue;
 1e8:	ef cf       	rjmp	.-34     	; 0x1c8 <main+0x30>
			}
			
			// Ignore other commands during sleep
			if (has_power_off_bit(current_state)) continue;
 1ea:	c7 fd       	sbrc	r28, 7
 1ec:	ed cf       	rjmp	.-38     	; 0x1c8 <main+0x30>
			
			// Change brightness or animation speed depending on current mode
			if (command == IR_KEY_UP) {
 1ee:	80 3a       	cpi	r24, 0xA0	; 160
 1f0:	61 f4       	brne	.+24     	; 0x20a <main+0x72>
				if (current_state == STATE_COLOR) {
 1f2:	c1 11       	cpse	r28, r1
 1f4:	06 c0       	rjmp	.+12     	; 0x202 <main+0x6a>

/**
 * Increase and apply brightness value
 */
static inline byte anim_inc_brightness(byte brightness) {
	if (brightness <= BRIGHTNESS_MAX_VALUE / 2) brightness <<= 1;
 1f6:	d1 34       	cpi	r29, 0x41	; 65
 1f8:	10 f4       	brcc	.+4      	; 0x1fe <main+0x66>
 1fa:	dd 0f       	add	r29, r29
 1fc:	0f c0       	rjmp	.+30     	; 0x21c <main+0x84>
	else brightness = BRIGHTNESS_MAX_VALUE;
 1fe:	d0 e8       	ldi	r29, 0x80	; 128
 200:	0d c0       	rjmp	.+26     	; 0x21c <main+0x84>

/**
 * Decrease animation rate (increase speed)
 */
static inline byte anim_dec_rate(byte anim_rate) {
	if (anim_rate >= ANIM_RATE_MIN_VALUE * 2) return anim_rate >> 1;
 202:	11 30       	cpi	r17, 0x01	; 1
 204:	09 f3       	breq	.-62     	; 0x1c8 <main+0x30>
 206:	16 95       	lsr	r17
 208:	df cf       	rjmp	.-66     	; 0x1c8 <main+0x30>
				else {
					anim_rate = anim_dec_rate(anim_rate);
				}
				continue;
			}
			if (command == IR_KEY_DOWN) {
 20a:	80 32       	cpi	r24, 0x20	; 32
 20c:	81 f4       	brne	.+32     	; 0x22e <main+0x96>
				if (current_state == STATE_COLOR) {
 20e:	c1 11       	cpse	r28, r1
 210:	08 c0       	rjmp	.+16     	; 0x222 <main+0x8a>

/**
 * Decrease and apply brightness value
 */
static inline byte anim_dec_brightness(byte brightness) {
	if (brightness >= BRIGHTNESS_MIN_VALUE * 2) brightness >>= 1;
 212:	d0 32       	cpi	r29, 0x20	; 32
 214:	10 f0       	brcs	.+4      	; 0x21a <main+0x82>
 216:	d6 95       	lsr	r29
 218:	01 c0       	rjmp	.+2      	; 0x21c <main+0x84>
	else brightness = BRIGHTNESS_MIN_VALUE;
 21a:	d0 e1       	ldi	r29, 0x10	; 16
	anim_set_brightness(brightness);
 21c:	8d 2f       	mov	r24, r29
 21e:	5c df       	rcall	.-328    	; 0xd8 <anim_set_brightness>
 220:	d3 cf       	rjmp	.-90     	; 0x1c8 <main+0x30>

/**
 * Increase animation rate (decrease speed)
 */
static inline byte anim_inc_rate(byte anim_rate) {
	if (anim_rate <= ANIM_RATE_MAX_VALUE / 2) return anim_rate << 1;
 222:	17 ff       	sbrs	r17, 7
 224:	02 c0       	rjmp	.+4      	; 0x22a <main+0x92>
	return ANIM_RATE_MAX_VALUE;
 226:	1f ef       	ldi	r17, 0xFF	; 255
 228:	cf cf       	rjmp	.-98     	; 0x1c8 <main+0x30>

/**
 * Increase animation rate (decrease speed)
 */
static inline byte anim_inc_rate(byte anim_rate) {
	if (anim_rate <= ANIM_RATE_MAX_VALUE / 2) return anim_rate << 1;
 22a:	11 0f       	add	r17, r17
 22c:	cd cf       	rjmp	.-102    	; 0x1c8 <main+0x30>
				}
				continue;
			}
			
			// Change animation modes
			if (command == IR_KEY_ANIM_RAINBOW) {
 22e:	88 3c       	cpi	r24, 0xC8	; 200
 230:	11 f4       	brne	.+4      	; 0x236 <main+0x9e>
				current_state = STATE_RAINBOW_ANIMATION;
 232:	c1 e0       	ldi	r28, 0x01	; 1
 234:	c9 cf       	rjmp	.-110    	; 0x1c8 <main+0x30>
				continue;
			}
			if (command == IR_KEY_ANIM_JUMP) {
 236:	80 3f       	cpi	r24, 0xF0	; 240
 238:	11 f4       	brne	.+4      	; 0x23e <main+0xa6>
				current_state = STATE_JUMP_ANIMATION;
 23a:	c2 e0       	ldi	r28, 0x02	; 2
 23c:	c5 cf       	rjmp	.-118    	; 0x1c8 <main+0x30>
				continue;
			}
			if (command == IR_KEY_ANIM_FADE) {
 23e:	88 3d       	cpi	r24, 0xD8	; 216
 240:	11 f4       	brne	.+4      	; 0x246 <main+0xae>
				current_state = STATE_FADE_ANIMATION;
 242:	c3 e0       	ldi	r28, 0x03	; 3
 244:	c1 cf       	rjmp	.-126    	; 0x1c8 <main+0x30>
				continue;
			}
			if (command == IR_KEY_ANIM_STROBE) {
 246:	88 3e       	cpi	r24, 0xE8	; 232
 248:	59 f0       	breq	.+22     	; 0x260 <main+0xc8>
 * Search color by given key and set it as current
 * Returns 1 if color was changed, otherwise - 0
 */
static inline byte anim_set_color_by_key(byte key) {
	// Try to set white
	if (key == IR_KEY_COLOR_WHITE) {
 24a:	80 3d       	cpi	r24, 0xD0	; 208
 24c:	51 f4       	brne	.+20     	; 0x262 <main+0xca>
		r_value = 0;
 24e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <r_value>
		g_value = 0;
 252:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <g_value>
		b_value = 0;
 256:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <b_value>
		w_value = PWM_MAX_VALUE;
 25a:	e0 92 61 00 	sts	0x0061, r14	; 0x800061 <w_value>
 25e:	18 c0       	rjmp	.+48     	; 0x290 <main+0xf8>
				current_state = STATE_STROBE_ANIMATION;
 260:	c4 e0       	ldi	r28, 0x04	; 4
 262:	9e e0       	ldi	r25, 0x0E	; 14
	}
	
	// Try to set RGB
	byte i = COLORS_COUNT - 1;
	do {
		if (colors[i][0] == key) {
 264:	e9 2f       	mov	r30, r25
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	ee 0f       	add	r30, r30
 26a:	ff 1f       	adc	r31, r31
 26c:	ee 59       	subi	r30, 0x9E	; 158
 26e:	ff 4f       	sbci	r31, 0xFF	; 255
 270:	20 81       	ld	r18, Z
 272:	82 13       	cpse	r24, r18
 274:	03 c0       	rjmp	.+6      	; 0x27c <main+0xe4>
			anim_set_color_from_spectrum(colors[i][1]);
 276:	81 81       	ldd	r24, Z+1	; 0x01
 278:	72 df       	rcall	.-284    	; 0x15e <anim_set_color_from_spectrum>
 27a:	0a c0       	rjmp	.+20     	; 0x290 <main+0xf8>
			return 1;
		}
	} while(i--);
 27c:	91 50       	subi	r25, 0x01	; 1
 27e:	90 f7       	brcc	.-28     	; 0x264 <main+0xcc>
				anim_set_brightness(brightness);
			}
		}
		
		// If IR_KEY_POWER_OFF has been pressed - disable all outputs and go to sleep
		if (has_power_off_bit(current_state)) {
 280:	c7 ff       	sbrs	r28, 7
 282:	09 c0       	rjmp	.+18     	; 0x296 <main+0xfe>
			if (ir_is_idle_state()) power_off();
 284:	08 b6       	in	r0, 0x38	; 56
 286:	01 fe       	sbrs	r0, 1
 288:	9f cf       	rjmp	.-194    	; 0x1c8 <main+0x30>
 28a:	18 ba       	out	0x18, r1	; 24
 28c:	88 95       	sleep
 28e:	9c cf       	rjmp	.-200    	; 0x1c8 <main+0x30>
			}
			
			// Otherwise try to set color value
			if (anim_set_color_by_key(command)) {
				current_state = STATE_COLOR;
				anim_set_brightness(brightness);
 290:	8d 2f       	mov	r24, r29
 292:	22 df       	rcall	.-444    	; 0xd8 <anim_set_brightness>
				// continue;
			}
			
			// Otherwise try to set color value
			if (anim_set_color_by_key(command)) {
				current_state = STATE_COLOR;
 294:	c0 e0       	ldi	r28, 0x00	; 0
			if (ir_is_idle_state()) power_off();
			continue;
		}
		
		// Calculate animation step
		if (anim_counter >= anim_rate) {
 296:	f1 16       	cp	r15, r17
 298:	c8 f0       	brcs	.+50     	; 0x2cc <main+0x134>
			if (current_state == STATE_RAINBOW_ANIMATION) anim_rainbow(anim_local_counter); else
 29a:	c1 30       	cpi	r28, 0x01	; 1
 29c:	11 f4       	brne	.+4      	; 0x2a2 <main+0x10a>

/**
 * Rainbow fade animation
 */
static inline void anim_rainbow(byte counter) {
	anim_set_color_from_spectrum(counter);
 29e:	80 2f       	mov	r24, r16
 2a0:	04 c0       	rjmp	.+8      	; 0x2aa <main+0x112>
			if (current_state == STATE_JUMP_ANIMATION) anim_jump(anim_local_counter); else
 2a2:	c2 30       	cpi	r28, 0x02	; 2
 2a4:	29 f4       	brne	.+10     	; 0x2b0 <main+0x118>

/**
 * All colors jump animation
 */
static inline void anim_jump(byte counter) {
	anim_set_color_from_spectrum(counter >> JUMP_ANIMATION_DIVIDER << JUMP_ANIMATION_DIVIDER);
 2a6:	80 2f       	mov	r24, r16
 2a8:	80 7e       	andi	r24, 0xE0	; 224
 2aa:	59 df       	rcall	.-334    	; 0x15e <anim_set_color_from_spectrum>
	anim_set_brightness(BRIGHTNESS_MAX_VALUE);
 2ac:	80 e8       	ldi	r24, 0x80	; 128
 2ae:	0b c0       	rjmp	.+22     	; 0x2c6 <main+0x12e>
			if (current_state == STATE_FADE_ANIMATION) anim_fade(anim_local_counter); else
 2b0:	c3 30       	cpi	r28, 0x03	; 3
 2b2:	29 f4       	brne	.+10     	; 0x2be <main+0x126>

/**
 * Current color fade animation
 */
static inline void anim_fade(byte counter) {
	anim_set_brightness(counter <= BRIGHTNESS_MAX_VALUE ? counter : ~counter);
 2b4:	80 2f       	mov	r24, r16
 2b6:	01 38       	cpi	r16, 0x81	; 129
 2b8:	30 f0       	brcs	.+12     	; 0x2c6 <main+0x12e>
 2ba:	80 95       	com	r24
 2bc:	04 c0       	rjmp	.+8      	; 0x2c6 <main+0x12e>
			if (current_state == STATE_STROBE_ANIMATION) anim_strobe(anim_local_counter);
 2be:	c4 30       	cpi	r28, 0x04	; 4
 2c0:	19 f4       	brne	.+6      	; 0x2c8 <main+0x130>

/**
 * Current color strobe animation
 */
static inline void anim_strobe(byte counter) {
	anim_set_brightness(counter >> BRIGHTNESS_DIVIDER << BRIGHTNESS_DIVIDER);
 2c2:	80 2f       	mov	r24, r16
 2c4:	80 78       	andi	r24, 0x80	; 128
 2c6:	08 df       	rcall	.-496    	; 0xd8 <anim_set_brightness>
			anim_local_counter++;
 2c8:	0f 5f       	subi	r16, 0xFF	; 255
			anim_counter = 0;
 2ca:	f1 2c       	mov	r15, r1
		}
		anim_counter++;
 2cc:	f3 94       	inc	r15
		
		// Do PWM
		pwm_rgbw(r_current_value, g_current_value, b_current_value, w_current_value);
 2ce:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
 2d2:	20 91 83 00 	lds	r18, 0x0083	; 0x800083 <b_current_value>
 2d6:	30 91 84 00 	lds	r19, 0x0084	; 0x800084 <g_current_value>
 2da:	40 91 85 00 	lds	r20, 0x0085	; 0x800085 <r_current_value>
/**
 * Software PWM for RGBW
 */
#ifdef WHITE_PIN
static inline void pwm_rgbw(byte r_value, byte g_value, byte b_value, byte w_value) {
	if (r_value != PWM_MAX_VALUE) output_low(RED_PIN);
 2de:	46 35       	cpi	r20, 0x56	; 86
 2e0:	09 f0       	breq	.+2      	; 0x2e4 <main+0x14c>
 2e2:	c1 98       	cbi	0x18, 1	; 24
	if (g_value != PWM_MAX_VALUE) output_low(GREEN_PIN);
 2e4:	36 35       	cpi	r19, 0x56	; 86
 2e6:	09 f0       	breq	.+2      	; 0x2ea <main+0x152>
 2e8:	c2 98       	cbi	0x18, 2	; 24
	if (b_value != PWM_MAX_VALUE) output_low(BLUE_PIN);
 2ea:	26 35       	cpi	r18, 0x56	; 86
 2ec:	09 f0       	breq	.+2      	; 0x2f0 <main+0x158>
 2ee:	c0 98       	cbi	0x18, 0	; 24
	if (w_value != PWM_MAX_VALUE) output_low(WHITE_PIN);
 2f0:	96 35       	cpi	r25, 0x56	; 86
 2f2:	09 f0       	breq	.+2      	; 0x2f6 <main+0x15e>
 2f4:	c3 98       	cbi	0x18, 3	; 24
			if (current_state == STATE_RAINBOW_ANIMATION) anim_rainbow(anim_local_counter); else
			if (current_state == STATE_JUMP_ANIMATION) anim_jump(anim_local_counter); else
			if (current_state == STATE_FADE_ANIMATION) anim_fade(anim_local_counter); else
			if (current_state == STATE_STROBE_ANIMATION) anim_strobe(anim_local_counter);
			anim_local_counter++;
			anim_counter = 0;
 2f6:	86 e5       	ldi	r24, 0x56	; 86
	byte i = PWM_MAX_VALUE;
	do {
		if (i == r_value) output_high(RED_PIN);
 2f8:	48 13       	cpse	r20, r24
 2fa:	01 c0       	rjmp	.+2      	; 0x2fe <main+0x166>
 2fc:	c1 9a       	sbi	0x18, 1	; 24
		if (i == g_value) output_high(GREEN_PIN);
 2fe:	38 13       	cpse	r19, r24
 300:	01 c0       	rjmp	.+2      	; 0x304 <main+0x16c>
 302:	c2 9a       	sbi	0x18, 2	; 24
		if (i == b_value) output_high(BLUE_PIN);
 304:	28 13       	cpse	r18, r24
 306:	01 c0       	rjmp	.+2      	; 0x30a <main+0x172>
 308:	c0 9a       	sbi	0x18, 0	; 24
		if (i == w_value) output_high(WHITE_PIN);
 30a:	98 13       	cpse	r25, r24
 30c:	01 c0       	rjmp	.+2      	; 0x310 <main+0x178>
 30e:	c3 9a       	sbi	0x18, 3	; 24
	} while (--i);
 310:	81 50       	subi	r24, 0x01	; 1
 312:	91 f7       	brne	.-28     	; 0x2f8 <main+0x160>
 314:	59 cf       	rjmp	.-334    	; 0x1c8 <main+0x30>

00000316 <__mulhi3>:
 316:	00 24       	eor	r0, r0
 318:	55 27       	eor	r21, r21
 31a:	04 c0       	rjmp	.+8      	; 0x324 <__mulhi3+0xe>
 31c:	08 0e       	add	r0, r24
 31e:	59 1f       	adc	r21, r25
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	00 97       	sbiw	r24, 0x00	; 0
 326:	29 f0       	breq	.+10     	; 0x332 <__mulhi3+0x1c>
 328:	76 95       	lsr	r23
 32a:	67 95       	ror	r22
 32c:	b8 f3       	brcs	.-18     	; 0x31c <__mulhi3+0x6>
 32e:	71 05       	cpc	r23, r1
 330:	b9 f7       	brne	.-18     	; 0x320 <__mulhi3+0xa>
 332:	80 2d       	mov	r24, r0
 334:	95 2f       	mov	r25, r21
 336:	08 95       	ret

00000338 <_exit>:
 338:	f8 94       	cli

0000033a <__stop_program>:
 33a:	ff cf       	rjmp	.-2      	; 0x33a <__stop_program>
